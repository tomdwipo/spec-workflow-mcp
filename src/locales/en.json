{
  "tools": {
    "steeringGuide": {
      "description": "Load guide for creating project steering documents.\n\n# Instructions\nCall ONLY when user explicitly requests steering document creation or asks about project architecture docs. Not part of standard spec workflow. Provides templates and guidance for product.md, tech.md, and structure.md creation.",
      "successMessage": "Steering workflow guide loaded - follow this workflow exactly",
      "dashboardMessage": "Dashboard: {{dashboardUrl}}",
      "dashboardUnavailable": "Dashboard not available",
      "nextSteps": {
        "proceedIfRequested": "Only proceed if user requested steering docs",
        "createProduct": "Create product.md first",
        "createTechAndStructure": "Then tech.md and structure.md",
        "reference": "Reference in future specs"
      },
      "guide": "# Steering Workflow\n\n## Overview\n\nCreate project-level guidance documents when explicitly requested. Steering docs establish vision, architecture, and conventions for established codebases.\n\n## Workflow Diagram\n\n```mermaid\nflowchart TD\n    Start([Start: Setup steering docs]) --> Guide[steering-guide<br/>Load workflow instructions]\n    \n    %% Phase 1: Product\n    Guide --> P1_Template[get-template-context<br/>templateType: steering<br/>template: product]\n    P1_Template --> P1_Generate[Generate vision & goals]\n    P1_Generate --> P1_Create[create-steering-doc<br/>document: product]\n    P1_Create --> P1_Approve[request-approval<br/>filePath only]\n    P1_Approve --> P1_Status[get-approval-status<br/>poll status]\n    P1_Status --> P1_Check{Status?}\n    P1_Check -->|needs-revision| P1_Update[Update document using user comments for guidance]\n    P1_Update --> P1_Create\n    P1_Check -->|approved| P1_Clean[delete-approval]\n    P1_Clean -->|failed| P1_Status\n    \n    %% Phase 2: Tech\n    P1_Clean -->|success| P2_Template[get-template-context<br/>templateType: steering<br/>template: tech]\n    P2_Template --> P2_Analyze[Analyze tech stack]\n    P2_Analyze --> P2_Create[create-steering-doc<br/>document: tech]\n    P2_Create --> P2_Approve[request-approval<br/>filePath only]\n    P2_Approve --> P2_Status[get-approval-status<br/>poll status]\n    P2_Status --> P2_Check{Status?}\n    P2_Check -->|needs-revision| P2_Update[Update document using user comments for guidance]\n    P2_Update --> P2_Create\n    P2_Check -->|approved| P2_Clean[delete-approval]\n    P2_Clean -->|failed| P2_Status\n    \n    %% Phase 3: Structure\n    P2_Clean -->|success| P3_Template[get-template-context<br/>templateType: steering<br/>template: structure]\n    P3_Template --> P3_Analyze[Analyze codebase structure]\n    P3_Analyze --> P3_Create[create-steering-doc<br/>document: structure]\n    P3_Create --> P3_Approve[request-approval<br/>filePath only]\n    P3_Approve --> P3_Status[get-approval-status<br/>poll status]\n    P3_Status --> P3_Check{Status?}\n    P3_Check -->|needs-revision| P3_Update[Update document using user comments for guidance]\n    P3_Update --> P3_Create\n    P3_Check -->|approved| P3_Clean[delete-approval]\n    P3_Clean -->|failed| P3_Status\n    \n    P3_Clean -->|success| Complete([Steering docs complete])\n    \n    style Start fill:#e6f3ff\n    style Complete fill:#e6f3ff\n    style P1_Check fill:#ffe6e6\n    style P2_Check fill:#ffe6e6\n    style P3_Check fill:#ffe6e6\n```\n\n## Steering Workflow Phases\n\n### Phase 1: Product Document\n**Purpose**: Define vision, goals, and user outcomes.\n\n**Tools**:\n- steering-guide: Load workflow instructions\n- get-template-context: Load product template (templateType: \"steering\", template: \"product\")\n- create-steering-doc: Create product.md\n- request-approval: Get user approval\n- get-approval-status: Check approval status\n- delete-approval: Clean up after approval\n\n**Process**:\n1. Load steering guide for workflow overview\n2. Load product template\n3. Generate product vision and goals\n4. Create document with create-steering-doc\n5. Request approval (filePath only)\n6. Poll status until approved/needs-revision (NEVER accept verbal approval)\n7. If needs-revision: update document, create NEW approval, do NOT proceed\n8. Once approved: delete-approval (must succeed) before proceeding\n9. If delete-approval fails: STOP - return to polling\n\n### Phase 2: Tech Document\n**Purpose**: Document technology decisions and architecture.\n\n**Tools**:\n- get-template-context: Load tech template (templateType: \"steering\", template: \"tech\")\n- create-steering-doc: Create tech.md\n- request-approval: Get user approval\n- get-approval-status: Check status\n- delete-approval: Clean up\n\n**Process**:\n1. Load tech template\n2. Analyze existing technology stack\n3. Document architectural decisions and patterns\n4. Create document and request approval\n5. Poll status until approved/needs-revision\n6. If needs-revision: update document, create NEW approval, do NOT proceed\n7. Once approved: delete-approval (must succeed) before proceeding\n8. If delete-approval fails: STOP - return to polling\n\n### Phase 3: Structure Document\n**Purpose**: Map codebase organization and patterns.\n\n**Tools**:\n- get-template-context: Load structure template (templateType: \"steering\", template: \"structure\")\n- create-steering-doc: Create structure.md\n- request-approval: Get user approval\n- get-approval-status: Check status\n- delete-approval: Clean up\n\n**Process**:\n1. Load structure template\n2. Analyze directory structure and file organization\n3. Document coding patterns and conventions\n4. Create document and request approval\n5. Poll status until approved/needs-revision\n6. If needs-revision: update document, create NEW approval, do NOT proceed\n7. Once approved: delete-approval (must succeed) before proceeding\n8. If delete-approval fails: STOP - return to polling\n9. After successful cleanup: \"Steering docs complete. Ready for spec creation?\"\n\n## Workflow Rules\n\n- Always use MCP tools, never create documents manually\n- Follow exact template structures\n- Get explicit user approval between phases\n- Complete phases in sequence (no skipping)\n- Approval requests: provide filePath only, never content\n- BLOCKING: Never proceed if delete-approval fails\n- CRITICAL: Must have approved status AND successful cleanup before next phase\n- CRITICAL: Verbal approval is NEVER accepted - dashboard or VS Code extension only\n- NEVER proceed on user saying \"approved\" - check system status only"
    },
    "specStatus": {
      "description": "Display comprehensive specification progress overview.\n\n# Instructions\nCall when resuming work on a spec or checking overall completion status. Shows which phases are complete and task implementation progress. Useful for understanding where you are in the workflow before continuing.",
      "projectPathDescription": "Absolute path to the project root",
      "specNameDescription": "Name of the specification",
      "successMessage": "Specification '{{specName}}' status: {{overallStatus}}",
      "phases": {
        "requirements": "Requirements",
        "design": "Design",
        "tasks": "Tasks",
        "implementation": "Implementation"
      },
      "nextSteps": {
        "requirements": {
          "create": "Create requirements.md",
          "loadContext": "Load context with get-steering-context",
          "requestApproval": "Request approval"
        },
        "design": {
          "create": "Create design.md",
          "reference": "Reference requirements",
          "requestApproval": "Request approval"
        },
        "tasks": {
          "create": "Create tasks.md",
          "breakdown": "Break down design",
          "requestApproval": "Request approval"
        },
        "implementation": {
          "nextPending": "Use manage-tasks with next-pending",
          "implement": "Implement tasks",
          "updateStatus": "Update status with manage-tasks",
          "begin": "Begin implementation with manage-tasks"
        },
        "completed": {
          "complete": "Spec complete",
          "runTests": "Run tests"
        }
      },
      "errors": {
        "notFound": "Specification '{{specName}}' not found",
        "genericFail": "Failed to get specification status: {{message}}",
        "nextSteps": {
          "checkName": "Check spec name",
          "useList": "Use spec-list for available specs",
          "create": "Create spec with create-spec-doc",
          "checkExists": "Check if the specification exists",
          "verifyPath": "Verify the project path",
          "useListGeneric": "Use spec-list to see available specifications"
        }
      }
    },
    "specList": {
      "description": "List all specifications in the project.\n\n# Instructions\nCall to see available specs before selecting one to work on. Shows status of each spec including phase completion. Useful for choosing which spec to implement or continue working on.",
      "projectPathDescription": "Absolute path to the project root",
      "successMessage_one": "Found {{count}} specification",
      "successMessage_other": "Found {{count}} specifications",
      "messages": {
        "noSpecs": "No specifications found"
      },
      "nextSteps": {
        "noSpecs": {
          "create": "Create a new specification using spec-create",
          "example": "Example: spec-create user-authentication \"User login and registration\""
        },
        "success": {
          "viewStatus": "Use spec-status <name> to view detailed status of a specific spec",
          "continue": "Use spec-execute <task-id> <name> to continue implementation",
          "create": "Create new specifications with spec-create"
        }
      },
      "errors": {
        "failed": "Failed to list specifications: {{message}}",
        "nextSteps": {
          "checkPath": "Check if the project path exists",
          "verifyDir": "Verify the .spec-workflow directory exists",
          "create": "Create a specification using spec-create if none exist"
        }
      }
    },
    "requestApproval": {
      "description": "Request user approval through the dashboard interface.\n\n# Instructions\nCall IMMEDIATELY after creating each document. Required before proceeding to next phase. CRITICAL: Only provide filePath parameter - the dashboard reads files directly. Never include document content in the request. Wait for user to review and approve before continuing.",
      "projectPathDescription": "Absolute path to the project root",
      "titleDescription": "Brief title describing what needs approval",
      "filePathDescription": "Path to the file that needs approval (relative to project root). The dashboard will read and display this file.",
      "typeDescription": "Type of approval request - \"document\" for content approval, \"action\" for action approval",
      "categoryDescription": "Category of the approval request - \"spec\" for specifications, \"steering\" for steering documents",
      "categoryNameDescription": "Name of the spec or \"steering\" for steering documents",
      "successMessage": "Approval request created successfully. Please review in dashboard: {{dashboardUrl}}",
      "dashboardUnavailable": "Dashboard URL not available",
      "nextSteps": {
        "blocking": "BLOCKING - Dashboard or VS Code extension approval required",
        "noVerbal": "VERBAL APPROVAL NOT ACCEPTED",
        "noVerbalConfirm": "Do not proceed on verbal confirmation",
        "useDashboard": "Use dashboard: {{dashboardUrl}} or VS Code extension",
        "useVscode": "Use VS Code extension for approval",
        "poll": "Poll status with: get-approval-status \"{{approvalId}}\""
      },
      "errors": {
        "failed": "Failed to create approval request: {{message}}"
      }
    },
    "refreshTasks": {
      "description": "Regenerate task list based on current requirements and design.\n\n# Instructions\nCall when tasks need updating after design changes or to bridge gaps between implementation and requirements. Analyzes existing requirements.md and design.md to create comprehensive updated task list. Replaces existing tasks.md with refreshed version.",
      "projectPathDescription": "Absolute path to the project root",
      "specNameDescription": "Name of the specification",
      "successMessage": "Task refresh context loaded for \"{{specName}}\". Ready for AI agent to analyze and update tasks.",
      "analysis": {
        "hasTasks": "\n## Current Task Analysis\n**Total Tasks**: {{total}}\n**Completed**: {{completed}} (preserve as-is, even if feature removed)\n**In Progress**: {{inProgress}} (preserve as-is, even if feature removed)\n**Pending**: {{pending}} (VALIDATE against requirements.md/design.md)\n\n### Tasks to Preserve (DO NOT MODIFY):\n{{completedList}}\n{{inProgressList}}\n\n### Pending Tasks (MUST VALIDATE):\n{{pendingList}}\n\n**VALIDATION REQUIRED**: For each pending task above, verify the feature is mentioned in requirements.md or design.md. If NOT mentioned, REMOVE the task.\n",
        "noTasks": "\n## Current Task Analysis\n**No tasks.md exists** - You will need to create the complete task list from scratch.\n",
        "none": "None",
        "checkPrompt": "CHECK: Is this feature in requirements.md?"
      },
      "instructions": {
        "main": "# Task Refresh Instructions\n\n## Context\nYou are refreshing the task list for specification \"{{specName}}\" because requirements or design may have changed during implementation. Your goal is to ensure the task list accurately reflects what needs to be done to bridge the gap between current implementation and the updated requirements/design.\n\n## CRITICAL: Source of Truth\n- **Requirements come ONLY from requirements.md** - not from existing tasks\n- **Design decisions come ONLY from design.md** - not from existing tasks  \n- **Tasks are implementation steps** - they implement requirements, they don't define them\n- If a feature exists in tasks but NOT in requirements.md/design.md, it has been REMOVED from the spec\n\n## Three-Pass Validation Process\n\n### PASS 1: Validate Existing Tasks Against Current Spec\nFor each existing task, ask: \"Is the feature this task implements still in requirements.md or design.md?\"\n\n**Actions for PENDING tasks:**\n- **KEEP**: If feature is still in requirements/design\n- **REMOVE**: If feature is NOT in requirements/design (feature was cut from spec)\n\n**Actions for COMPLETED/IN-PROGRESS tasks:**\n- **PRESERVE**: Always keep completed [x] and in-progress [-] tasks\n- **FLAG**: If feature was removed, add comment: \"_Note: Feature removed from spec but task preserved_\"\n\n### PASS 2: Gap Analysis  \nFor each requirement in requirements.md, ask: \"Is there a task that implements this?\"\nFor each design decision in design.md, ask: \"Are there tasks aligned with this architecture?\"\n\n**Actions:**\n- **ADD**: New tasks for requirements/design elements without tasks\n- **UPDATE**: Existing pending tasks that need alignment with updated requirements\n\n### PASS 3: Create Updated Task List (Only if Changes Needed)\n**DECISION POINT**: After Pass 1 and Pass 2, check:\n- Are there pending tasks to remove?\n- Are there new tasks to add? \n- Are there existing tasks to modify?\n\n**If NO changes needed**: Report \"Task list is already aligned with current requirements - no refresh needed\" and STOP.\n\n**If changes ARE needed**, build the new tasks.md with:\n1. All completed [x] tasks (preserved as-is)\n2. All in-progress [-] tasks (preserved as-is, with removal notes if applicable)\n3. Only pending [ ] tasks that have backing in current requirements/design\n4. New tasks for any missing requirements/design elements\n5. Proper sequencing and requirement references\n\n## Critical Rules\n- **NEVER** modify completed tasks (marked with [x])\n- **NEVER** modify in-progress tasks (marked with [-])  \n- **REMOVE** pending tasks for features not in current requirements/design\n- **ALWAYS** reference specific requirements (e.g., _Requirements: 1.1, 2.3_)\n- **ENSURE** tasks build incrementally\n- **MAKE** tasks atomic, specific, and actionable\n- **PRESERVE** the original tasks.md structure - only update the task items themselves\n- **NO** additional sections in tasks.md (no Dependencies, Metrics, Notes, Changes Made, etc.)\n- **KEEP** tasks.md clean - any change summary goes in your chat response only\n\n## Task Format Requirements\nEach task must follow this format:\n```\n- [ ] 1.1 Create user authentication interface\n  - File: src/auth/UserAuth.ts\n  - Implement login and registration forms\n  - Add form validation and error handling\n  - Purpose: Enable user account management\n  - _Leverage: src/components/BaseForm.tsx, src/utils/validation.ts_\n  - _Requirements: 1.1, 1.2_\n```\n\n## Implementation Strategy\n1. **Read** requirements.md and design.md carefully - these define what should exist\n2. **Validate** existing tasks against current spec (Pass 1)\n3. **Identify** gaps in task coverage (Pass 2)  \n4. **Build** updated task list with proper validation (Pass 3)\n5. **Use** create-spec-doc tool to save the updated tasks.md\n6. **IMPORTANT**: Keep tasks.md in the same format as the original - only the task items should change\n\n## Example: Handling Removed Features\nIf tasks exist for \"kanban view\" but \"kanban view\" is NOT mentioned in requirements.md:\n- **REMOVE** any pending [ ] kanban tasks \n- **PRESERVE** any completed [x] or in-progress [-] kanban tasks\n- **ADD NOTE**: \"_Note: Kanban feature removed from spec but completed work preserved_\"\n\n## Next Steps\nAfter analyzing the documents below:\n1. Perform the three-pass validation process\n2. **DECISION POINT**: If no changes are needed after validation, simply report \"Tasks already aligned\" and STOP\n3. **ONLY if changes needed**: Use create-spec-doc tool with:\n   - projectPath: \"{{projectPath}}\"\n   - specName: \"{{specName}}\"\n   - document: \"tasks\"\n   - content: [your validated and updated tasks markdown - SAME FORMAT as original]\n4. Ensure ONLY current requirements have tasks\n5. Verify task dependencies and order make sense\n6. **REMEMBER**: Tasks.md should contain ONLY the updated task list - no extra sections"
      },
      "fullContext": "{{instructions}}\n\n{{taskAnalysis}}\n\n---\n\n## Requirements Document\n{{requirementsContent}}\n\n---\n\n## Design Document  \n{{designContent}}\n\n---\n\n## Current Tasks Document\n{{tasksContent}}\n\n---\n\n## Summary\nYou now have all the context needed to refresh the task list. Use the create-spec-doc tool to create an updated tasks.md that:\n- Preserves all completed ([x]) and in-progress ([-]) tasks (even if feature was removed)\n- REMOVES pending ([ ]) tasks for features NOT in current requirements.md/design.md  \n- Adds new tasks for requirements/design elements missing tasks\n- Ensures proper task sequencing and requirement references\n- Only includes tasks that implement features actually specified in requirements.md/design.md\n\n**REMEMBER**: If a feature exists in tasks but NOT in requirements.md/design.md, it has been CUT from the spec and pending tasks should be REMOVED.",
      "messages": {
        "noRequirements": "No requirements.md found",
        "noDesign": "No design.md found",
        "noTasks": "No tasks.md exists - create from scratch"
      },
      "nextSteps": {
        "pass1": "PASS 1: Validate each existing task against requirements.md/design.md",
        "pass2": "PASS 2: Identify gaps - find requirements/design elements without tasks",
        "decision": "DECISION: If no changes are needed, report \"Tasks already aligned\" and stop",
        "pass3": "PASS 3: Only if changes needed, create updated tasks.md using create-spec-doc tool"
      },
      "errors": {
        "noContext": "No requirements.md or design.md found. Cannot refresh tasks without specification context.",
        "genericFail": "Failed to load refresh context: {{message}}",
        "nextSteps": {
          "createReq": "Create requirements.md first using create-spec-doc tool",
          "createDesign": "Create design.md after requirements are approved",
          "thenRefresh": "Then use refresh-tasks to create aligned task list",
          "checkDir": "Check if the specification directory exists",
          "checkPerms": "Verify file permissions",
          "checkName": "Ensure the spec name is correct"
        }
      }
    },
    "getTemplateContext": {
      "description": "Load a specific document template for spec or steering documents.\n\n# Instructions\nCall with the exact template needed for your current phase. For spec workflow, request requirements, design, or tasks templates. For steering documents, request product, tech, or structure templates. Each template provides the exact format expected by create-spec-doc or create-steering-doc tools.",
      "projectPathDescription": "Absolute path to the project root",
      "templateTypeDescription": "Type of template: spec for workflow templates, steering for project docs",
      "templateDescription": "Specific template to load",
      "docTitles": {
        "requirements": "Requirements Template",
        "design": "Design Template",
        "tasks": "Tasks Template",
        "product": "Product Template",
        "tech": "Tech Template",
        "structure": "Structure Template"
      },
      "successMessage": "Loaded {{template}} template for {{templateType}}",
      "messages": {
        "fullContext": "## {{title}}\n\n{{content}}\n\n**Note**: Template loaded. Use this structure when creating your {{template}} document."
      },
      "nextSteps": {
        "success": {
          "useTemplate": "Use template for {{template}} document",
          "followStructure": "Follow template structure exactly",
          "nextSpec": "Next: create-spec-doc with document: \"{{template}}\"",
          "nextSteering": "Next: create-steering-doc with document: \"{{template}}\""
        }
      },
      "errors": {
        "invalidType": "Invalid template type: {{templateType}}",
        "validTypes": "Use: spec or steering",
        "invalidTemplateForType": "Invalid template \"{{template}}\" for type \"{{templateType}}\"",
        "validTemplates": "Valid templates: {{validTemplates}}",
        "validSpecTemplates": "Use: requirements, design, or tasks",
        "validSteeringTemplates": "Use: product, tech, or structure",
        "templateEmpty": "Template file exists but is empty: {{file}}",
        "fileNotFound": "Template file not found: {{file}}",
        "genericFail": "Failed to load template context: {{message}}",
        "nextSteps": {
          "checkContent": "Check template file content",
          "verifyIntegrity": "Verify file integrity",
          "checkDirectory": "Check templates directory",
          "verifyExists": "Verify template file exists",
          "location": "Location: {{location}}",
          "checkPermissions": "Verify file permissions",
          "checkFiles": "Check template files"
        }
      }
    },
    "getSteeringContext": {
      "description": "Load project steering documents for architectural and product context.\n\n# Instructions\nCall during initial spec setup to check for existing project guidelines (product.md, tech.md, structure.md). Optional for new projects but recommended for established codebases. If no steering docs exist, ask user whether to create them first or proceed with spec.",
      "projectPathDescription": "Absolute path to the project root",
      "docTitles": {
        "product": "Product Context",
        "tech": "Technology Context",
        "structure": "Structure Context"
      },
      "successMessage": "Steering context loaded successfully",
      "messages": {
        "notFound": "No steering documents found",
        "notFoundContext": "## Steering Documents Context\n\nNo steering documents found. Proceed using best practices for the detected technology stack.",
        "emptyDocs": "Steering documents exist but are empty",
        "emptyContext": "## Steering Documents Context\n\nSteering documents found but all are empty.",
        "fullContext": "## Steering Documents Context (Pre-loaded)\n\n{{sections}}\n\n**Note**: Steering documents have been pre-loaded. Do not use get-content to fetch them again."
      },
      "nextSteps": {
        "notFound": {
          "useBestPractices": "Use best practices and conventions for the detected technology stack",
          "askToCreate": "For established codebases: Ask user if they want to create steering documents for project-specific guidance",
          "newProjectNote": "For new projects: Steering context is typically not needed - proceed with technology best practices"
        },
        "empty": {
          "useBestPractices": "Use best practices and conventions for the technology stack",
          "askToPopulate": "For established codebases: Ask user if they want to populate steering documents with project-specific context",
          "newProjectNote": "For new projects: Empty steering documents are fine - proceed with standard practices"
        },
        "success": {
          "doNotCallAgain": "Steering context loaded - do not call get-steering-context again",
          "reference": "Reference these standards in requirements, design, and tasks",
          "align": "Ensure all decisions align with documented project vision"
        }
      },
      "errors": {
        "genericFail": "Failed to load steering context: {{message}}",
        "nextSteps": {
          "checkPath": "Check if the project path exists",
          "checkPermissions": "Verify file permissions",
          "runSetup": "Run spec-steering-setup if steering documents are missing"
        }
      }
    },
    "getSpecContext": {
      "description": "Load existing spec documents for resumed work.\n\n# Instructions\nCall ONLY when returning to work on existing specs after a break or starting fresh on a spec you didn't create. Never use during active spec creation if you just created the documents. Loads requirements.md, design.md, and tasks.md for implementation context.",
      "projectPathDescription": "Absolute path to the project root",
      "specNameDescription": "Name of the specification to load context for",
      "docTitles": {
        "requirements": "Requirements",
        "design": "Design",
        "tasks": "Tasks"
      },
      "successMessage": "Specification context loaded successfully for: {{specName}}",
      "messages": {
        "emptyDocs": "Specification documents for \"{{specName}}\" exist but are empty",
        "emptyContext": "## Specification Context\n\nNo specification documents found for: {{specName}}",
        "fullContext": "## Specification Context (Pre-loaded): {{specName}}\n\n{{sections}}\n\n**Note**: Specification documents have been pre-loaded. Do not use get-content to fetch them again."
      },
      "nextSteps": {
        "empty": {
          "addContent": "Add content to .spec-workflow/specs/{{specName}}/",
          "createMissing": "Create missing documents",
          "ensureContent": "Ensure all three docs have content"
        },
        "success": {
          "proceed": "Context loaded - proceed with implementation",
          "reference": "Reference requirements and design for each task",
          "updateStatus": "Update task status with manage-tasks"
        }
      },
      "errors": {
        "notFound": "No specification found for: {{specName}}",
        "availableSpecs": "Available specs: {{specs}}",
        "genericFail": "Failed to load specification context: {{message}}",
        "nextSteps": {
          "useExisting": "Use an existing spec name",
          "createNew": "Or create new with create-spec-doc",
          "create": "Create spec with create-spec-doc",
          "checkSpelling": "Check spec name spelling",
          "verifySetup": "Verify project setup",
          "checkPath": "Check project path",
          "verifyName": "Verify spec name",
          "checkPermissions": "Check file permissions",
          "createIfMissing": "Create spec if missing"
        }
      }
    },
    "getApprovalStatus": {
      "description": "Check the current status of an approval request.\n\n# Instructions\nCall after request-approval to poll for user decision. Continue checking until status is \"approved\" or \"needs-revision\". If needs-revision, review feedback, update document with create-spec-doc, then create NEW approval request. Only proceed to next phase after \"approved\" status.",
      "projectPathDescription": "Absolute path to the project root (optional - will use context if not provided)",
      "approvalIdDescription": "The ID of the approval request to check",
      "messages": {
        "pending": "BLOCKED: Status is {{status}}. Verbal approval is NOT accepted. Use dashboard or VS Code extension only.",
        "other": "Approval status: {{status}}"
      },
      "nextSteps": {
        "pending": {
          "blocked": "BLOCKED - Do not proceed",
          "noVerbal": "VERBAL APPROVAL NOT ACCEPTED - Use dashboard or VS Code extension only",
          "useUI": "Approval must be done via dashboard or VS Code extension",
          "poll": "Continue polling with get-approval-status"
        },
        "approved": {
          "canProceed": "APPROVED - Can proceed",
          "delete": "Run delete-approval before continuing",
          "response": "Response: {{response}}"
        },
        "rejected": {
          "blocked": "BLOCKED - REJECTED",
          "doNotProceed": "Do not proceed",
          "revise": "Review feedback and revise",
          "reason": "Reason: {{reason}}",
          "notes": "Notes: {{notes}}"
        },
        "needsRevision": {
          "blocked": "BLOCKED - Do not proceed",
          "update": "Update document with feedback",
          "newRequest": "Create NEW approval request",
          "feedback": "Feedback: {{feedback}}",
          "notes": "Notes: {{notes}}",
          "comments": "{{count}} comments for targeted fixes"
        }
      },
      "errors": {
        "projectPathRequired": "Project path is required. Please provide projectPath parameter.",
        "notFound": "Approval request not found: {{approvalId}}",
        "genericFail": "Failed to check approval status: {{message}}"
      }
    },
    "deleteApproval": {
      "description": "Clean up completed approval requests from the system.\n\n# Instructions\nCall IMMEDIATELY after receiving \"approved\" status. Essential cleanup step to prevent approval clutter. Must complete before moving to next workflow phase. Keeps the approval system organized for future requests.",
      "projectPathDescription": "Absolute path to the project root (optional - will use context if not provided)",
      "approvalIdDescription": "ID of the approval request to delete",
      "successMessage": "Approval request \"{{approvalId}}\" deleted successfully",
      "nextSteps": {
        "cleanupComplete": "Cleanup complete",
        "continue": "Continue to next phase"
      },
      "errors": {
        "projectPathRequired": "Project path is required. Please provide projectPath parameter.",
        "notFound": "Approval request \"{{approvalId}}\" not found",
        "notApproved": "BLOCKED: Cannot proceed - status is \"{{status}}\". VERBAL APPROVAL NOT ACCEPTED. Use dashboard or VS Code extension.",
        "deleteFailed": "Failed to delete approval request \"{{approvalId}}\"",
        "genericFail": "Failed to delete approval: {{message}}",
        "nextSteps": {
          "verifyId": "Verify approval ID",
          "checkStatus": "Check status with get-approval-status",
          "stop": "STOP - Do not proceed to next phase",
          "wait": "Wait for approval",
          "poll": "Poll with get-approval-status",
          "checkPermissions": "Check file permissions",
          "verifyExists": "Verify approval exists",
          "retry": "Retry",
          "checkPath": "Check project path",
          "checkSystem": "Check approval system"
        }
      }
    },
    "createSteeringDoc": {
      "description": "Create project steering documents with architectural guidance.\n\n# Instructions\nCall ONLY after user explicitly approves steering document creation. Not required for spec workflow. Creates one of: product.md (vision/goals), tech.md (technical decisions), or structure.md (codebase organization). Use steering-guide first for templates.",
      "projectPathDescription": "Absolute path to the project root",
      "documentDescription": "Which steering document to create: product, tech, or structure",
      "contentDescription": "The complete markdown content for the steering document",
      "docNames": {
        "product": "Product Steering",
        "tech": "Technical Steering",
        "structure": "Structure Steering"
      },
      "successMessage": "{{docName}} document created successfully",
      "nextSteps": {
        "saved": "Saved {{filename}}",
        "product": "Next: Create tech.md",
        "tech": "Next: Create structure.md",
        "structure": "Steering complete. Use request-approval with category:\"steering\" and categoryName:\"steering\"",
        "dashboard": "Dashboard: {{dashboardUrl}}",
        "dashboardUnavailable": "Dashboard not available"
      },
      "errors": {
        "failed": "Failed to create {{document}} steering document: {{message}}",
        "nextSteps": {
          "checkPath": "Check project path exists",
          "verifyContent": "Verify markdown content",
          "retry": "Retry with correct parameters"
        }
      }
    },
    "createSpecDoc": {
      "description": "Create or update spec documents following the workflow sequence.\n\n# Instructions\nCall AFTER loading templates and generating content for each phase. Creates one document at a time: first requirements, then design, then tasks. Never create multiple documents without user approval between each. Always follow template structure from get-template-context.",
      "projectPathDescription": "Absolute path to the project root",
      "specNameDescription": "Feature name in kebab-case (e.g., user-authentication)",
      "documentDescription": "Which spec document to create/update: requirements, design, or tasks",
      "contentDescription": "The complete markdown content for the spec document",
      "errors": {
        "designBeforeReq": "WORKFLOW VIOLATION: Cannot create design.md before requirements.md exists!\nCreate requirements.md first, get user review, then create design.md.",
        "tasksBeforeDesign": "WORKFLOW VIOLATION: Cannot create tasks.md before design.md exists!\nCreate design.md first, get user review, then create tasks.md.",
        "failed": "Failed: {{message}}"
      },
      "successMessage": "Created {{filename}} at: {{filePath}}\n\nBLOCKING: Must request approval via dashboard or VS Code extension.\nVERBAL APPROVAL NOT ACCEPTED.\nDo NOT proceed until system shows approved status."
    },
    "specWorkflowGuide": {
      "description": "Load essential spec workflow instructions to guide feature development from idea to implementation.\n\n# Instructions\nCall this tool FIRST when users request spec creation, feature development, or mention specifications. This provides the complete workflow sequence (Requirements → Design → Tasks → Implementation) that must be followed. Always load before any other spec tools to ensure proper workflow understanding.",
      "dashboardMessage": "Monitor progress on dashboard: {{dashboardUrl}}",
      "dashboardUnavailable": "Dashboard not available - running in headless mode",
      "successMessage": "Complete spec workflow guide loaded - follow this workflow exactly",
      "nextSteps": {
        "step1": "Follow sequence: Requirements → Design → Tasks → Implementation",
        "step2": "Load templates with get-template-context first",
        "step3": "Request approval after each document",
        "step4": "Use MCP tools only"
      },
      "guide": "# Spec Development Workflow\n\n## Overview\n\nYou guide users through spec-driven development using MCP tools. Transform rough ideas into detailed specifications through Requirements → Design → Tasks → Implementation phases. Use web search when available for current best practices.\n\nFeature names use kebab-case (e.g., user-authentication). Create ONE spec at a time.\n\n## Workflow Diagram\n```mermaid\nflowchart TD\n    Start([Start: User requests feature]) --> CheckSteering{Steering docs exist?}\n    CheckSteering -->|Yes| P1_Load[get-steering-context]\n    CheckSteering -->|No| P1_Template\n    \n    %% Phase 1: Requirements\n    P1_Load --> P1_Template[get-template-context<br/>templateType: spec<br/>template: requirements]\n    P1_Template --> P1_Research[Web search if available]\n    P1_Research --> P1_Create[create-spec-doc<br/>document: requirements]\n    P1_Create --> P1_Approve[request-approval<br/>filePath only]\n    P1_Approve --> P1_Status[get-approval-status<br/>poll status]\n    P1_Status --> P1_Check{Status?}\n    P1_Check -->|needs-revision| P1_Update[Update document using user comments as guidance]\n    P1_Update --> P1_Create\n    P1_Check -->|approved| P1_Clean[delete-approval]\n    P1_Clean -->|failed| P1_Status\n    \n    %% Phase 2: Design\n    P1_Clean -->|success| P2_Template[get-template-context<br/>templateType: spec<br/>template: design]\n    P2_Template --> P2_Analyze[Analyze codebase patterns]\n    P2_Analyze --> P2_Create[create-spec-doc<br/>document: design]\n    P2_Create --> P2_Approve[request-approval<br/>filePath only]\n    P2_Approve --> P2_Status[get-approval-status<br/>poll status]\n    P2_Status --> P2_Check{Status?}\n    P2_Check -->|needs-revision| P2_Update[Update document using user comments as guidance]\n    P2_Update --> P2_Create\n    P2_Check -->|approved| P1_Clean[delete-approval]\n    P2_Clean -->|failed| P2_Status\n    \n    %% Phase 3: Tasks\n    P2_Clean -->|success| P3_Template[get-template-context<br/>templateType: spec<br/>template: tasks]\n    P3_Template --> P3_Break[Convert design to tasks]\n    P3_Break --> P3_Create[create-spec-doc<br/>document: tasks]\n    P3_Create --> P3_Approve[request-approval<br/>filePath only]\n    P3_Approve --> P3_Status[get-approval-status<br/>poll status]\n    P3_Status --> P3_Check{Status?}\n    P3_Check -->|needs-revision| P3_Update[Update document using user comments as guidance]\n    P3_Update --> P3_Create\n    P3_Check -->|approved| P3_Clean[delete-approval]\n    P3_Clean -->|failed| P3_Status\n    \n    %% Phase 4: Implementation\n    P3_Clean -->|success| P4_Ready[Spec complete.<br/>Ready to implement?]\n    P4_Ready -->|Yes| P4_Status[spec-status]\n    P4_Status --> P4_Task[manage-tasks<br/>action: set-status<br/>status: in-progress]\n    P4_Task --> P4_Code[Implement code]\n    P4_Code --> P4_Complete[manage-tasks<br/>action: set-status<br/>status: completed]\n    P4_Complete --> P4_More{More tasks?}\n    P4_More -->|Yes| P4_Task\n    P4_More -->|No| End([Implementation Complete])\n    \n    style Start fill:#e1f5e1\n    style End fill:#e1f5e1\n    style P1_Check fill:#ffe6e6\n    style P2_Check fill:#ffe6e6\n    style P3_Check fill:#ffe6e6\n    style CheckSteering fill:#fff4e6\n    style P4_More fill:#fff4e6\n```\n\n## Spec Workflow\n\n### Phase 1: Requirements\n**Purpose**: Define what to build based on user needs.\n\n**Tools**:\n- get-steering-context: Check for project guidelines (if established codebase)\n- get-template-context: Load requirements template (templateType: \"spec\", template: \"requirements\")\n- create-spec-doc: Create requirements.md\n- request-approval: Get user approval\n- get-approval-status: Check approval status\n- delete-approval: Clean up after approval\n\n**Process**:\n1. Check for steering docs (ask user if they want to create them for established codebases)\n2. Load requirements template\n3. Research market/user expectations (if web search available)\n4. Generate requirements as user stories with EARS criteria\n5. Create document with create-spec-doc\n6. Request approval (filePath only, never content)\n7. Poll status until approved/needs-revision (NEVER accept verbal approval)\n8. If needs-revision: update document, create NEW approval, do NOT proceed\n9. Once approved: delete-approval (must succeed) before proceeding\n10. If delete-approval fails: STOP - return to polling\n\n### Phase 2: Design\n**Purpose**: Create technical design addressing all requirements.\n\n**Tools**:\n- get-template-context: Load design template (templateType: \"spec\", template: \"design\")\n- create-spec-doc: Create design.md\n- request-approval: Get user approval\n- get-approval-status: Check status\n- delete-approval: Clean up\n\n**Process**:\n1. Load design template\n2. Analyze codebase for patterns to reuse\n3. Research technology choices (if web search available)\n4. Generate design with all template sections\n5. Create document and request approval\n6. Poll status until approved/needs-revision\n7. If needs-revision: update document, create NEW approval, do NOT proceed\n8. Once approved: delete-approval (must succeed) before proceeding\n9. If delete-approval fails: STOP - return to polling\n\n### Phase 3: Tasks\n**Purpose**: Break design into atomic implementation tasks.\n\n**Tools**:\n- get-template-context: Load tasks template (templateType: \"spec\", template: \"tasks\")\n- create-spec-doc: Create tasks.md\n- request-approval: Get user approval\n- get-approval-status: Check status\n- delete-approval: Clean up\n\n**Process**:\n1. Load tasks template\n2. Convert design into atomic tasks (1-3 files each)\n3. Include file paths and requirement references\n4. Create document and request approval\n5. Poll status until approved/needs-revision\n6. If needs-revision: update document, create NEW approval, do NOT proceed\n7. Once approved: delete-approval (must succeed) before proceeding\n8. If delete-approval fails: STOP - return to polling\n9. After successful cleanup: \"Spec complete. Ready to implement?\"\n\n### Phase 4: Implementation\n**Purpose**: Execute tasks systematically.\n\n**Tools**:\n- spec-status: Check overall progress\n- manage-tasks: Track and update task status\n- get-spec-context: Load specs if returning to work\n\n**Process**:\n1. Check current status with spec-status\n2. For each task:\n   - manage-tasks action: \"set-status\", status: \"in-progress\"\n   - Implement the code\n   - manage-tasks action: \"set-status\", status: \"completed\"\n3. Continue until all tasks complete\n\n## Workflow Rules\n\n- Always use MCP tools, never create documents manually\n- Follow exact template structures\n- Get explicit user approval between phases\n- Complete phases in sequence (no skipping)\n- One spec at a time\n- Use kebab-case for spec names\n- Approval requests: provide filePath only, never content\n- BLOCKING: Never proceed if delete-approval fails\n- CRITICAL: Must have approved status AND successful cleanup before next phase\n- CRITICAL: Verbal approval is NEVER accepted - dashboard or VS Code extension only\n- NEVER proceed on user saying \"approved\" - check system status only\n- Steering docs are optional - only create when explicitly requested"
    }
  }
}
